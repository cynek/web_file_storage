#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


#
# generated by racc
#

require '../lib/parser/request_parser.rex'

class RequestParser < Racc::Parser

module_eval(<<'...end request_parser.racc/module_eval...', 'request_parser.racc', 30)

...end request_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     5,     4,     6,     8,     7,     9,    10,    11 ]

racc_action_check = [
     0,     1,     0,     1,     4,     2,     5,     6,     8 ]

racc_action_pointer = [
    -2,     1,     2,   nil,    -1,     6,     4,   nil,     2,   nil,
   nil,   nil ]

racc_action_default = [
    -5,    -5,    -5,    -3,    -5,    -5,    -5,    -1,    -5,    12,
    -2,    -4 ]

racc_goto_table = [
     1,     3 ]

racc_goto_check = [
     1,     2 ]

racc_goto_pointer = [
   nil,     0,     1 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 8, :_reduce_1,
  3, 8, :_reduce_2,
  1, 8, :_reduce_none,
  3, 9, :_reduce_4 ]

racc_reduce_n = 5

racc_shift_n = 12

racc_token_table = {
  false => 0,
  :error => 1,
  :H_NAME => 2,
  :H_VALUE => 3,
  :METHOD => 4,
  :URI => 5,
  :PROTOCOL => 6 }

racc_nt_base = 7

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "H_NAME",
  "H_VALUE",
  "METHOD",
  "URI",
  "PROTOCOL",
  "$start",
  "header",
  "request_line" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'request_parser.racc', 8)
  def _reduce_1(val, _values, result)
     result = Hash.new; 
                                             result[val[0]] = val[1]
                                           
    result
  end
.,.,

module_eval(<<'.,.,', 'request_parser.racc', 11)
  def _reduce_2(val, _values, result)
     result[val[1]] = val[2] 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'request_parser.racc', 14)
  def _reduce_4(val, _values, result)
     result = Hash.new
                                             result['REQUEST_METHOD'] = val[0]
                                             result['URI'] = val[1]
                                             result['PROTOCOL'] = val[2]
                                           
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RequestParser


